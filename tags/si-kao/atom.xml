<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh">
    <title> - 思考</title>
    <link href="https://linq.github.io/tags/si-kao/atom.xml" rel="self" type="application/atom+xml"/>
    <link href="https://linq.github.io"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2024-04-21T00:00:00+00:00</updated>
    <id>https://linq.github.io/tags/si-kao/atom.xml</id>
    <entry xml:lang="zh">
        <title>生命的意义在于过程</title>
        <published>2024-04-21T00:00:00+00:00</published>
        <updated>2024-04-21T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://linq.github.io/posts/life-in-journey/" type="text/html"/>
        <id>https://linq.github.io/posts/life-in-journey/</id>
        
        <content type="html">&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;linq.github.io&#x2F;posts&#x2F;life-in-journey&#x2F;good-luck-in-marking.webp&quot; alt=&quot;good luck in marking&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;今天在即刻上看到史铁生《好运设计》的节选，里面一段重点论述了“生命的意义在于过程”。这让我顿时有所感触，之前不记得在哪里看到一个观点，主要讲述我们很多人为了将来能过得更好，会选择现在忍受痛苦，但是将来又是不可控的，你现在承受的辛苦，也不见得能换来你想要的未来，我们更应该抓住能掌控的现在。&lt;&#x2F;p&gt;
&lt;p&gt;为什么现在会有所感触，主要还是最近 1、2 年在工作上做了挺多辛苦的付出，但是今年回顾发现自己当初想达到的目标也没达到，反而这两年跟家人相处的时间少了很多，不禁感叹是否值得？&lt;&#x2F;p&gt;
&lt;p&gt;感觉我们观念里面总是强调，为了美好的未来，我们现在应该多吃苦，多付出。但是仔细想下我们的现在，不就是过去的将来吗，我们的现在值得过去辛苦的付出吗，还是说程度不够，时间不够，要十倍、百倍，十年、二十年？&lt;&#x2F;p&gt;
&lt;p&gt;如果以爬山来做类比，那爬到山顶应该就是我们的目标吧。对于一座很难攀登的山，比如华山、泰山，是否只有爬到顶峰才是我们想要的呢？我想爬山的这个过程也是值得我们关注的，如果我们能够以享受的心情，跟身边的家人好友一起，关注一路上的美景，呼吸新鲜的空气，互相扶持着走走停停，一路上拍拍照、打打卡，即使最后没有达到山顶，这个过程就已经是宝贵的经历，我们也已经收获了很多，不仅锻炼了身体，也放松了心情，跟亲人好友共处了美好的时光。反而爬到山顶也只是一刻的满足，如果过程中是痛苦的，那这个收获相对长期的付出反而是不值得的。&lt;&#x2F;p&gt;
&lt;p&gt;经常会忘记自己只是一个普通人，总感觉自己比身边的人更优秀，感觉自己值得更好的将来。也正是这种不切实际的幻想，导致自己一直活的很辛苦，总想要美好的未来，但总是求而不得，或者只能短暂的得到，但是又很快回到这个轮回。我想我应该设个闹钟每天早上提醒自己一遍，你只是一个普通人，接受你的现在，做好你能做的，多关心你身边的人，在做好当下之后，如果有余力可以再为将来多做一点准备，&lt;code&gt;但是不能为了所谓的美好未来，而牺牲现在&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="zh">
        <title>聊聊学习的85法则</title>
        <published>2024-04-14T00:00:00+00:00</published>
        <updated>2024-04-14T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://linq.github.io/posts/learn-rule-85/" type="text/html"/>
        <id>https://linq.github.io/posts/learn-rule-85/</id>
        
        <content type="html">&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;linq.github.io&#x2F;posts&#x2F;learn-rule-85&#x2F;85-learn.webp&quot; alt=&quot;learn rule 85&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;近期因为工作上的变动，学习上有所松懈，已经有一段时间没有学习新的东西，书也一段时间没看了，今天意识到这个状态不太对，准备调整下状态。正好想起之前接触过的学习的85 原则，趁着这个机会梳理下。&lt;&#x2F;p&gt;
&lt;p&gt;原论文是在自然上发表的 &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.nature.com&#x2F;articles&#x2F;s41467-019-12552-4.pdf&quot;&gt;The Eighty Five Percent Rule for optimal learning&lt;&#x2F;a&gt;，论文是关于机器学习相关，具体而言，对于一类广泛的学习算法（例如，基于随机梯度下降的算法），最佳训练错误率约为&lt;strong&gt;15.87%&lt;&#x2F;strong&gt;，或者说最佳训练准确率约为&lt;strong&gt;85%&lt;&#x2F;strong&gt;。这一规则适用于人工神经网络和生物合理的神经网络。论文的主要观点是关于&lt;strong&gt;最佳学习难度&lt;&#x2F;strong&gt;的。研究人员发现，当我们学习新事物时，存在一个“甜蜜区”，即学习难度既不太容易也不太难，此时学习进展最快。&lt;&#x2F;p&gt;
&lt;p&gt;如果我们扩展到更宽泛的学习上看，它也很符合直觉：我们希望学习一些已知之外新的知识，但是又不能太难，太容易的知识会让我们感觉到无聊，而太难的又会打击我们的信心。所以我们需要找到一个合适的难度，让我们学新知识的时候，能保持 85%的准确率。这个时候问题就变成了我们应该如何找到这个甜蜜区？&lt;&#x2F;p&gt;
&lt;p&gt;可行的策略：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;评估当前的水平&lt;&#x2F;li&gt;
&lt;li&gt;渐进的增加难度&lt;&#x2F;li&gt;
&lt;li&gt;适当的重复练习&lt;&#x2F;li&gt;
&lt;li&gt;反馈和调整&lt;&#x2F;li&gt;
&lt;li&gt;…&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;但是这个有点太复杂了，如果每学习一点东西都按照这套流程走一遍，估计这个动作本身消耗的精力都大于要学习本身。&lt;&#x2F;p&gt;
&lt;p&gt;那有没什么简化的方式呢，这个时候就可以回顾下所谓的学习 85 法则了，参考&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;36kr.com&#x2F;p&#x2F;1236733055209095&quot;&gt;学习的 85% 法则&lt;&#x2F;a&gt; 这篇文章，首先我认为文章对The Eighty Five Percent Rule for optimal learning论文的解读是有问题的，论文强调的是通过合适的难度达到 85%的准确率，而文章直接曲解成 85%熟悉，15%新鲜的知识。&lt;&#x2F;p&gt;
&lt;p&gt;但是我觉得结论又是有意思的，85%熟悉，15% 新内容的这种方式，它可以减轻我们内心的抗拒心理，更容易坚持下去。毕竟学习本身就是反人类的，人天生就想要待在舒适区，只是为了为了其他一些诉求，才不得以学习。而这种 15.87% 新鲜率的方式，让我们既可以不离舒适区太远，又能维持一定的学习诉求。而只要开始去做了，顺势的就会做的更多，这时候也就不会（也没必要）纠结所谓的 85% 熟悉，15%新内容了。&lt;&#x2F;p&gt;
&lt;p&gt;如果讲 15.87 这个数字能给我什么启发，应该是温故知新吧。自我反思自己学习新东西的还是挺有兴趣的，但是对于学过的知识很少会去复习回顾，这样就导致很多知识学了就忘了，相当于没学，也间接导致有段时间对于学习很抗拒。&lt;&#x2F;p&gt;
&lt;p&gt;孔老夫子说的好，『学而时习之，不亦悦乎』，学习中&lt;code&gt;要温故而知新，而且要进行刻意练习&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="zh">
        <title>程序员要不存在了吗</title>
        <published>2024-03-23T00:00:00+00:00</published>
        <updated>2024-04-07T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://linq.github.io/posts/programmer-future/" type="text/html"/>
        <id>https://linq.github.io/posts/programmer-future/</id>
        
        <content type="html">&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;linq.github.io&#x2F;posts&#x2F;programmer-future&#x2F;cognition-lab-devin-software-engineer.webp&quot; alt=&quot;cognition lab devin software engineer&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;最近大模型的发展，尤其是首个 AI 程序员 Devin 公布后，网上关于程序员不存在的言论层出不穷。尤其是近期团队的一些同学也保持这种论调，而且是很悲观的认为很快就不需要会写代码的人。&lt;&#x2F;p&gt;
&lt;p&gt;首先对于这个观点我持保守态度，不可否认大模型的发展很快，现在都已经能写出一定复杂度的代码。但是我们也应该看到的是，现在大模型写的代码能力还是比较初级的，基本是一些脚本，或者一些复杂度不高的功能。对于一个大型的信息系统，比如一个企业信息管理系统，我不认为在没有足够输入的情况下它能做到满足需求。而且这里存在的一个很大的问题是，写代码容易，如果我需要增加功能怎么办，最简单的是把整个代码逛给大模型，然后再通过一定的提示词让它来改吗，这里就涉及到一个很麻烦的问题，如何保证模型能按照你想要的方向来改代码，如何保证写出来的代码不会因为幻觉出现牛头不对马嘴。更重要的是，出错了怎么办，让模型自己改吗。&lt;&#x2F;p&gt;
&lt;p&gt;其次是我认为大模型应该只是加速低级程序员的淘汰过程。我一直坚信技术是为业务服务的，技术也应该是从业务的快速发展需求中沉淀出来的，而不是闭门造车，或者低级的复制。对于有一定业务 sense 的程序员，他其实已经不只是在写代码，更是在通过技术方式将自己的领域知识转化成领域模型，完善产品设计。而对于看不到业务只埋头技术的程序员，只会简单的 CRUD 的程序员，我觉得被替代的可能性还是存在的。毕竟让大模型写出一个纯技术黑盒能用的代码还是不复杂的，大不了要加功能点的时候再生成一遍就好了。&lt;&#x2F;p&gt;
&lt;p&gt;回到我的观点，大模型的发展对整个软件行业是有利的，想想以前遇到一个问题只能 Google，还可能遇到 CSDN 这种不靠谱的网站，现在一个简单的 prompt 再贴点提示信息差不多就能找到问题。而且大模型也加速了程序员学习技能的速度，以前学一个技术可能需要两三天，现在通过跟着大模型学习，可能小半天就能掌握个七七八八了。&lt;&#x2F;p&gt;
&lt;p&gt;最重要的，我们不能做一个只会简单编码的人，技术需要服务业务，一个业务技术都擅长的架构师，又如何会怕 AI 踢掉自己的饭碗呢。&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
